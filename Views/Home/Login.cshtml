
@{
    ViewBag.Title = "Login";
}
<div class="loader"></div>
<div class="login-container">
    <form class="login-form">

        <h4 claass="" style="max-width:100%; margin-bottom: 20px;"> Login </h4>
        <div class="form-group">
           
            <input type="text" onkeyup="UserName(this)" style="max-width:100%" required>
            <label class="label1" id="uname">Username</label>
        </div>
        <div class="form-group">
            <input type="password"  onkeyup="PassWord(this)" style="max-width:100%" required>
            <label class="label1" id="pwd">Password</label>
        </div>
        <button type="submit" id="button1">Login</button>
    </form>
</div>

<div class="">
    <form class="register-form">
        <h4 claass="" style="max-width:100%; margin-bottom: 20px;"> User Details </h4>
     
        <div class="form-group" style="text-align: center;">
            <label class="" style="display: block; margin-bottom: 10px;">Profile Image</label>
            <img id="imagePreview" src="" class="card-img-top rounded-circle mx-auto d-block mt-3
" alt="Image Preview" style=" width: 184px; height: 182px;object-fit: cover; margin: 10px auto;border: 4px solid #fff;">
        </div>

        <div class="form-group" >
            <input type="text" id="fname_" style="max-width:100%" readonly>
            <label class="label2" id="fname" >First Name</label>
        </div>
        <div class="form-group">
            <input type="text" id="lname_" style="max-width:100%" readonly>
            <label class="label2" id="lname"  >Last Name</label>
        </div>
        <div class="form-group">
            <input type="email" id="email_" style="max-width:100%" readonly>
            <label class="label2" id="email" >Email</label>
        </div>

        <div class="form-group">
            <input type="tel" id="mobile_"  style="max-width:100%" readonly>
            <label class="label2" id="mobile"  >Mobile No</label>
        </div>
        <div class="form-group">
            <input type="text" id="addr_" style="max-width:100%" readonly>
            <label class="label2" id="addr"  >Address</label>
        </div>
        <div class="form-group">
            <input type="date" id="dob_" style="max-width:100%"  readonly>
            <label class="label2" id="dob"   >Date of Birth</label>
        </div>
        <div class="form-group">
            <input type="text" id="Country_" style="max-width:100%" readonly>
            <label class="label2" id="Country"  > Country</label>
        </div>
        <div class="form-group">
            <input type="text" id="State_" style="max-width:100%" readonly>
            <label class="label2" id="State"  >State</label>
        </div>
        <div class="form-group">
            <input type="text" id="City_" style="max-width:100%" readonly>
            <label class="label2" id="City" >City</label>
        </div>


        <button type="submit" id="button2">Logout</button>

    </form>
</div>
<style>
    :root {
        /* Light Theme */
        --light-bg: #ffffff;
        --light-text: #213547;
        --light-primary: #1976d2;
        --light-primary-hover: #1565c0;
        --light-border: rgba(0, 0, 0, 0.23);
        --light-label: rgba(0, 0, 0, 0.6);
        --light-input-bg: transparent;
        --light-error: #d32f2f;
        --light-shadow: 0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12);
        /* Dark Theme */
        --dark-bg: #121212;
        --dark-text: rgba(255, 255, 255, 0.87);
        --dark-primary: #90caf9;
        --dark-primary-hover: #64b5f6;
        --dark-border: rgba(255, 255, 255, 0.23);
        --dark-label: rgba(255, 255, 255, 0.6);
        --dark-input-bg: rgba(255, 255, 255, 0.05);
        --dark-error: #f44336;
        --dark-shadow: 0px 2px 1px -1px rgba(0,0,0,0.5), 0px 1px 1px 0px rgba(0,0,0,0.3), 0px 1px 3px 0px rgba(0,0,0,0.25);
    }

    body {
        background-color: var(--light-bg);
        color: var(--light-text);
        font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
        margin: 0;
        transition: background-color 0.3s, color 0.3s;
        min-height: 100vh;
    }

        body.dark {
            background-color: var(--dark-bg);
            color: var(--dark-text);
        }

    /* Form Components */
    .login-container, .register-form {
        margin: 20px auto;
        max-width: 500px;
        background: #f9feff;
        padding: 24px;
        border-radius: 8px;
        box-shadow: var(--light-shadow);
        transition: all 0.3s;
    }

    .dark .login-container,
    .dark .register-form {
        background: #121232;
        box-shadow: var(--dark-shadow);
    }

    .form-group {
        position: relative;
        margin-bottom: 1.5rem;
    }

    input {
        width: 100%;
        padding: 12px 12px 6px 12px;
        border: 1px solid var(--light-border);
        border-radius: 4px;
        background-color: var(--light-input-bg);
        font-size: 1rem;
        color: var(--light-text);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .dark input {
        border-color: var(--dark-border);
        background-color: var(--dark-input-bg);
        color: var(--dark-text);
    }

    input:focus {
        outline: none;
        border-color: var(--light-primary);
        border-width: 2px;
        padding: 11px 11px 5px 11px;
        box-shadow: 0 0 0 1px var(--light-primary);
    }

    .dark input:focus {
        border-color: var(--dark-primary);
        box-shadow: 0 0 0 1px var(--dark-primary);
    }

    .label1, .label2 {
        position: absolute;
        top: 16px;
        left: 12px;
        font-size: 1rem;
        color: var(--light-label);
        background-color: #f9feff;
        padding: 0 4px;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        transform-origin: left top;
        pointer-events: none;
    }

    .dark .label1,
    .dark .label2 {
        color: var(--dark-label);
        background-color: #121232;
    }

    input:focus ~ .label1,
    input:not(:placeholder-shown) ~ .label1,
    input:focus ~ .label2,
    input:not(:placeholder-shown) ~ .label2 {
        transform: translateY(-50%) scale(0.75);
        color: var(--light-primary);
        top: 0;
        left: 8px;
    }

    .dark input:focus ~ .label1,
    .dark input:not(:placeholder-shown) ~ .label1,
    .dark input:focus ~ .label2,
    .dark input:not(:placeholder-shown) ~ .label2 {
        color: var(--dark-primary);
    }

    /* Buttons */
    #button1, #button2 {
        position: relative;
        overflow: hidden;
        padding: 10px 16px;
        background-color: #193dd9;
        border: none;
        border-radius: 4px;
        color: white;
        font-size: 0.875rem;
        font-weight: 500;
        letter-spacing: 0.02857em;
        text-transform: uppercase;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: var(--light-shadow);
    }

    .dark #button1,
    .dark #button2 {
        background-color: var(--dark-primary);
        color: rgba(0, 0, 0, 0.87);
        box-shadow: var(--dark-shadow);
    }

    #button1:hover, #button2:hover {
        background-color: var(--light-primary-hover);
        transform: translateY(-1px);
    }

    .dark #button1:hover,
    .dark #button2:hover {
        background-color: var(--dark-primary-hover);
    }

    /* Ripple Effect */
    .ripple {
        position: absolute;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.7);
        transform: scale(0);
        animation: ripple 600ms linear;
        pointer-events: none;
    }

    .dark .ripple {
        background-color: rgba(0, 0, 0, 0.3);
    }

    @@keyframes ripple {
        to

    {
        transform: scale(4);
        opacity: 0;
    }

    }

    /* Error States */
    input.error {
        border-color: var(--light-error);
    }

    .dark input.error {
        border-color: var(--dark-error);
    }

    input.error ~ label {
        color: var(--light-error);
    }

    .dark input.error ~ label {
        color: var(--dark-error);
    }

    .error-message {
        color: var(--light-error);
        font-size: 0.75rem;
        margin-top: 3px;
        margin-left: 12px;
    }

    .dark .error-message {
        color: var(--dark-error);
    }
</style>

<script>
    $(document).ready(function () {
        $.ajax({
            url: '@Url.Action("validtoken", "Home")',
            type: 'POST',
            success: function (response) {
                if (response.success) {

                    const loginContainer = document.querySelector('.login-container');
                    loginContainer.classList.add('hidden');
                    $(".register-form").css("display", "");
                      $(".loader").css("display","block");

                    loginContainer.style.display = 'none';
                   
                    $.ajax({
                        url: '@Url.Action("GetDetailsFromToken","Home")',
                        type: 'GET',
                        success: function (response) {
                            if (response.success)
                            {
                                $("#imagePreview").attr("src", response.message.ImagePath);
                                    $("#fname_").val(response.message.FirstName);
                                    $("#lname_").val(response.message.LastName);
                                    $("#email_").val(response.message.Email);
                                    $("#mobile_").val(response.message.MobileNo);
                                    $("#addr_").val(response.message.Address);
                                    $("#dob_").val(response.message.Dob);
                                    $("#Country_").val(response.message.SelectedCountry);
                                    $("#State_").val(response.message.selectedState);
                                    $("#City_").val(response.message.selectedCity);
                                    $(".loader").css("display","none");

                                }
                            }
                    });
                }
                else
                {
                    $(".register-form").css("display", "none");
                      $(".loader").css("display","none");

                }

            }
        });

    });

    $(document).ready(function () {
          $(".loader").css("display","none");
        document.body.appendChild(globalAlertContainer);

        $(".register-form").on("submit", function (event) {
            event.preventDefault();
              $(".loader").css("display","block");
            $.ajax({
                url:'@Url.Action("DeleteToken","Home")',
                type:'DELETE',
                contentType: "application/json",
                success: function(response)
                {
                      if(response.success)
                  {
                        showAlert(response.message, "danger", 1900);
                         setTimeout(() => { window.location.reload(); $(".loader").css("display","none"); }, 1900);
                         
                  }
                  else
                  {
                     console.log("not deleted");
                     showAlert(response.message, "danger", 1900);
                       $(".loader").css("display","none");
                  }
                }
            });
        });

        $(".login-form").on("submit", function (event) {
            event.preventDefault();
               $(".loader").css("display",""); // Prevents the form from submitting (optional, for testing)
            const username = $('input[type="text"]').val();
            const password = $('input[type="password"]').val()


            const formData = {
                Email: username,
                ConfirmPassword: password
            };
            

            $.ajax({
                url: '@Url.Action("UserLogin", "Home")',
                type: 'POST',
                data: JSON.stringify(formData),
                contentType: "application/json",
                dataType: "json",

                success: function (response) {

                    if (response.success) {


                        const loginContainer = document.querySelector('.login-container');
                        loginContainer.classList.add('hidden');
                        showAlert("Successfully Loged", "success", 1900);


                        setTimeout(() => {
                            loginContainer.style.display = 'none';
                            $(".register-form").css("display", "");
                            window.location.reload();
                              $(".loader").css("display","none");
                        }, 1900);

                    }
                    else {


                      
             
                        showAlert(response.message) ; // Handle failure
                        $(".register-form").css("display", "none");
                        $(".loader").css("display","none");
                       
                    }


                }

            });
        });
    });

   function UserName(input) {
    const $input = $(input);
    const value = $input.val();
    const $errorSpan = $("#uname");
    const emailPattern = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;


       $errorSpan.css("color","red")

    if (!value) {
        $errorSpan.text("Email is required").addClass("error"); // Error state
        input.setCustomValidity("Email is required");
        $errorSpan.css("top", "");
    } else if (value.length < 5) {
        $errorSpan.text("Email must be at least 5 characters").addClass("error");
        input.setCustomValidity("Email must be at least 5 characters");
    } else if (!emailPattern.test(value)) {
        $errorSpan.text("Email Invalid Format").addClass("error");
        input.setCustomValidity("Invalid Format");
    } else {
        $errorSpan.text("Username").removeClass("error"); // Valid state
        input.setCustomValidity("");
        $errorSpan.css("color", "")
    }
    }

    function PassWord(input)
    {
        const $input = $(input);
        const value = $input.val();
        $errorSpan = $("#pwd");
        letterPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@@#$%^&*])[A-Za-z\d!@@#$%^&*]{8,}$/;
        $errorSpan.css("color", "red")

        if (!value) {
            $errorSpan.text("Password is required").addClass("error");
            input.setCustomValidity("Password is required");
            $errorSpan.css("top", "");
        } else if (value.length < 6) {
            $errorSpan.text("Password must be at least 6 characters").addClass("error");
            input.setCustomValidity("Password must be at least 6 characters");
        } else if (!letterPattern.test(value)) {
            $errorSpan.text("Password : 8+, 1A, 1a, 1#, 1!@@#$%").addClass("error");
            input.setCustomValidity("Password: 8+ chars, 1 upper, 1 lower, 1 digit, 1 special (!@@#$%^&*)");
        } else {
            $errorSpan.text("Password").removeClass("error");
            input.setCustomValidity("");
            $errorSpan.css("color", "")
        }

    }

    // Create the global alert container
        var globalAlertContainer = document.createElement("div");
    globalAlertContainer.id = "globalAlertContainer";
    globalAlertContainer.style.position = "fixed";
    globalAlertContainer.style.top = "20px";
    globalAlertContainer.style.left = "50%";
    globalAlertContainer.style.transform = "translateX(-50%)";
    globalAlertContainer.style.zIndex = "1100";
    globalAlertContainer.style.width = "400px";
    globalAlertContainer.style.maxWidth = "90%";
    globalAlertContainer.style.display = "flex";
    globalAlertContainer.style.flexDirection = "column";
    globalAlertContainer.style.alignItems = "center";
    document.body.appendChild(globalAlertContainer);

    function showAlert(message, type = "danger", duration = 3000) {
        const alertDiv = document.createElement("div");
        alertDiv.classList.add("alert", `alert-${type}`, "shadow-lg", "p-3", "rounded", "animated-alert");

        // Base styles
        alertDiv.style.position = "relative";
        alertDiv.style.marginBottom = "10px";
        alertDiv.style.opacity = "0";
        alertDiv.style.transform = "scale(0.9)";
        alertDiv.style.transition = "opacity 0.3s ease, transform 0.3s ease";
        alertDiv.style.width = "100%";
        alertDiv.style.maxWidth = "400px";
        alertDiv.style.boxShadow = "0px 4px 10px rgba(0, 0, 0, 0.1)";
        alertDiv.style.borderLeft = `5px solid ${
            type === "danger" ? "var(--light-error)" :
            type === "warning" ? "#ffc107" : "#28a745"
        }`;
        alertDiv.style.backgroundColor = "var(--light-bg)";
        alertDiv.style.color = "var(--light-text)";
        alertDiv.style.borderRadius = "8px";
        alertDiv.style.padding = "16px";

        // Dark mode styles
        if (document.body.classList.contains('dark')) {
            alertDiv.style.backgroundColor = "var(--dark-bg)";
            alertDiv.style.color = "var(--dark-text)";
            alertDiv.style.boxShadow = "0px 4px 10px rgba(0, 0, 0, 0.3)";
            alertDiv.style.borderLeft = `5px solid ${
                type === "danger" ? "var(--dark-error)" :
                type === "warning" ? "#ffc107" : "#28a745"
            }`;
        }

        // Progress bar
        const progressBar = document.createElement("div");
        progressBar.style.height = "3px";
        progressBar.style.width = "100%";
        progressBar.style.position = "absolute";
        progressBar.style.bottom = "0";
        progressBar.style.left = "0";
        progressBar.style.backgroundColor = type === "danger" ? "var(--light-error)" :
                                          type === "warning" ? "#ffc107" : "#28a745";
        progressBar.style.transition = `width ${duration}ms linear`;
        progressBar.style.borderRadius = "0 0 8px 8px";

        // Dark mode progress bar
        if (document.body.classList.contains('dark')) {
            progressBar.style.backgroundColor = type === "danger" ? "var(--dark-error)" :
                                              type === "warning" ? "#ffc107" : "#28a745";
        }

        alertDiv.innerHTML = `
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <span style="font-weight: 500;">${message}</span>
                <button type="button" style="
                    background: none;
                    border: none;
                    cursor: pointer;
                    color: ${document.body.classList.contains('dark') ? 'var(--dark-text)' : 'var(--light-text)'};
                    font-size: 1.2rem;
                    padding: 0 0 0 10px;
                " aria-label="Close">×</button>
            </div>
        `;

        alertDiv.appendChild(progressBar);
        globalAlertContainer.appendChild(alertDiv);

        // Animation in
        setTimeout(() => {
            alertDiv.style.opacity = "1";
            alertDiv.style.transform = "scale(1)";
            progressBar.style.width = "0";
        }, 100);

        // Auto-hide
        const hideTimeout = setTimeout(() => {
            alertDiv.style.opacity = "0";
            alertDiv.style.transform = "scale(0.9)";
            setTimeout(() => alertDiv.remove(), 500);
        }, duration);

        // Close button
        alertDiv.querySelector("button").addEventListener("click", function() {
            clearTimeout(hideTimeout);
            alertDiv.style.opacity = "0";
            alertDiv.style.transform = "scale(0.9)";
            setTimeout(() => alertDiv.remove(), 500);
        });

        // Watch for dark mode changes
        const observer = new MutationObserver(() => {
            if (document.body.classList.contains('dark')) {
                alertDiv.style.backgroundColor = "var(--dark-bg)";
                alertDiv.style.color = "var(--dark-text)";
                alertDiv.style.boxShadow = "0px 4px 10px rgba(0, 0, 0, 0.3)";
                alertDiv.querySelector("button").style.color = "var(--dark-text)";
                progressBar.style.backgroundColor = type === "danger" ? "var(--dark-error)" :
                                                  type === "warning" ? "#ffc107" : "#28a745";
                alertDiv.style.borderLeft = `5px solid ${
                    type === "danger" ? "var(--dark-error)" :
                    type === "warning" ? "#ffc107" : "#28a745"
                }`;
            } else {
                alertDiv.style.backgroundColor = "var(--light-bg)";
                alertDiv.style.color = "var(--light-text)";
                alertDiv.style.boxShadow = "0px 4px 10px rgba(0, 0, 0, 0.1)";
                alertDiv.querySelector("button").style.color = "var(--light-text)";
                progressBar.style.backgroundColor = type === "danger" ? "var(--light-error)" :
                                                  type === "warning" ? "#ffc107" : "#28a745";
                alertDiv.style.borderLeft = `5px solid ${
                    type === "danger" ? "var(--light-error)" :
                    type === "warning" ? "#ffc107" : "#28a745"
                }`;
            }
        });

        observer.observe(document.body, { attributes: true, attributeFilter: ['class'] });
    }

    function showCustomConfirm(userId, callback) {

        document.getElementById("userIdPlaceholder").textContent = userId;


        const confirmModal = new bootstrap.Modal(document.getElementById("confirmModal"));
        confirmModal.show();

        document.getElementById("confirmDelete").onclick = function () {
            confirmModal.hide(); // Hide the modal
            callback(true); // User confirmed
        };

        // Handle the "Cancel" button click or modal close
        document.getElementById("confirmModal").addEventListener("hidden.bs.modal", function () {
            callback(false); // User canceled
        });
    }

       function customAlert(message, delayInSeconds) {
         setTimeout(() => {
             alert(message);
         }, delayInSeconds * 1000);
     }
        // Add ripple effect to buttons
    function createRipple(event) {
        const button = event.currentTarget;

        const circle = document.createElement("span");
        const diameter = Math.max(button.clientWidth, button.clientHeight);
        const radius = diameter / 2;

        circle.style.width = circle.style.height = `${diameter}px`;
        circle.style.left = `${event.clientX - button.getBoundingClientRect().left - radius}px`;
        circle.style.top = `${event.clientY - button.getBoundingClientRect().top - radius}px`;
        circle.classList.add("ripple");

        const ripple = button.getElementsByClassName("ripple")[0];

        if (ripple) {
            ripple.remove();
        }

        button.appendChild(circle);
    }

    // Add event listeners to buttons
    document.querySelectorAll('#button1, #button2').forEach(button => {
        button.addEventListener('click', createRipple);
    });
</script>

<style>
    .loader {
        border: 8px solid #f3f3f3; /* Light gray */
        border-top: 8px solid #3498db; /* Blue */
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index:1101;
    }

    @@keyframes spin {
        0%

    {
        transform: translate(-50%, -50%) rotate(0deg);
    }

    100% {
        transform: translate(-50%, -50%) rotate(360deg);
    }

    }

    /* Hide loader when content is loaded */
    .loaded .loader {
        display: none;
    }
</style>

